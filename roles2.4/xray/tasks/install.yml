---
- debug:
    msg: "Performing installation of Xray..."

- name: create group for xray
  group:
    name: "{{ xray_group }}"
    state: present
  become: yes

- name: create user for xray
  user:
    name: "{{ xray_user }}"
    group: "{{ xray_group }}"
    system: yes
  become: yes

- name: Install epel-release
  yum:
    name: "epel-release"
    state: present
  become: yes

- name: Install snapd
  yum:
    name: "snapd"
    state: present
  become: yes

- name: Install net-tools
  yum:
    name: "net-tools"
    state: present
  become: yes

- name: enable snapd socket
  shell: "systemctl enable --now snapd.socket"
  become: yes

- name: snap install yq
  shell: "snap install yq"
  become: yes

- name: ensure jfrog_home_directory exists
  file:
    path: "{{ jfrog_home_directory }}"
    state: directory
  become: yes

- name: 'Add {{ extra_path }} if PATH does not exist'
  vars:
    extra_path: "/var/lib/snapd/snap/yq/current/bin:/sbin:/bin:/usr/sbin:/usr/bin"
  lineinfile:
    path: /etc/environment
    line: 'PATH="{{ extra_path }}"'
    insertafter: EOF
  when: lookup('file', '/etc/environment') is not search('^\s*PATH\s*=')

- name: 'Add {{ extra_path }} to PATH'
  vars:
    extra_path: /var/lib/snapd/snap/yq/current/bin
  lineinfile:
    path: /etc/environment
    regexp: 'PATH=(["])((?!.*?{{ extra_path }}).*?)(["])$'
    line: 'PATH=\1\2:{{ extra_path }}\3'
    backrefs: yes
  when: lookup('file', '/etc/environment') is search('^\s*PATH\s*=')

- name: Recursively remove directory {{ xray_home }}
  file:
    path: "{{ xray_home }}"
    state: absent

- name: Local Copy xray {{ local_xray_tar }}
  unarchive:
    src: "{{ local_xray_tar }}"
    dest: "{{ jfrog_home_directory }}"
    owner: "{{ xray_user }}"
    group: "{{ xray_group }}"
    creates: "{{ xray_untar_home }}"
  become: yes
  when: local_xray_tar is defined
  register: downloadxray
  until: downloadxray is succeeded
  retries: 3



- name: download xray {{ xray_tar }}
  unarchive:
    src: "{{ xray_tar }}"
    dest: "{{ jfrog_home_directory }}"
    remote_src: yes
    owner: "{{ xray_user }}"
    group: "{{ xray_group }}"
    creates: "{{ xray_untar_home }}"
  become: yes
  register: downloadxray
  until: downloadxray is succeeded
  retries: 3

- name: MV untar directory to xray home
  command: "mv {{ xray_untar_home }} {{ xray_home }}"
  become: yes

- debug:
    msg: "Running dependency installation for {{ ansible_os_family }}"

- name: perform dependency installation
  include_tasks: "{{ ansible_os_family }}.yml"

- name: ensure etc exists
  file:
    path: "{{ xray_home }}/var/etc"
    state: directory
    owner: "{{ xray_user }}"
    group: "{{ xray_group }}"
  become: yes

- name: use specified system yaml
  copy:
    src: "{{ xray_system_yaml }}"
    dest: "{{ xray_home }}/var/etc/system.yaml"
  become: yes
  when: xray_system_yaml is defined

- name: configure system yaml template
  template:
    src: "{{ xray_system_yaml_template }}"
    dest: "{{ xray_home }}/var/etc/system.yaml"
  become: yes
  when: xray_system_yaml is not defined

- name: ensure {{ xray_home }}/var/etc/security/ exists
  file:
    path: "{{ xray_home }}/var/etc/security/"
    state: directory
    owner: "{{ xray_user }}"
    group: "{{ xray_group }}"
  become: yes

- name: configure master key
  template:
    src: master.key.j2
    dest: "{{ xray_home }}/var/etc/security/master.key"
  become: yes

- name: configure join key
  template:
    src: join.key.j2
    dest: "{{ xray_home }}/var/etc/security/join.key"
  become: yes

- name: ensure {{ xray_home }}/var/etc/info/ exists
  file:
    path: "{{ xray_home }}/var/etc/info/"
    state: directory
    owner: "{{ xray_user }}"
    group: "{{ xray_group }}"
  become: yes

- name: configure installer info
  template:
    src: installer-info.json.j2
    dest: "{{ xray_home }}/var/etc/info/installer-info.json"
  become: yes

- name: create xray service
  shell: "{{ xray_home }}/app/bin/installService.sh"
  become: yes

- name: start and enable xray
  service:
    name: xray
    state: restarted
  become: yes
